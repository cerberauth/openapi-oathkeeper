([]rule.Rule) (len=19) {
  (rule.Rule) {
    ID: (string) (len=6) "addPet",
    Version: (string) "",
    Description: (string) (len=26) "Add a new pet to the store",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=64) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/pet"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=212) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 6f  61 75 74 68 2e 63 65 72  |ttps://oauth.cer|
          00000020  62 65 72 61 75 74 68 2e  63 6f 6d 2f 2e 77 65 6c  |berauth.com/.wel|
          00000030  6c 2d 6b 6e 6f 77 6e 2f  6a 77 6b 73 2e 6a 73 6f  |l-known/jwks.jso|
          00000040  6e 22 5d 2c 22 72 65 71  75 69 72 65 64 5f 73 63  |n"],"required_sc|
          00000050  6f 70 65 22 3a 5b 22 77  72 69 74 65 3a 70 65 74  |ope":["write:pet|
          00000060  73 22 2c 22 72 65 61 64  3a 70 65 74 73 22 5d 2c  |s","read:pets"],|
          00000070  22 74 61 72 67 65 74 5f  61 75 64 69 65 6e 63 65  |"target_audience|
          00000080  22 3a 5b 22 68 74 74 70  73 3a 2f 2f 61 70 69 2e  |":["https://api.|
          00000090  63 65 72 62 65 72 61 75  74 68 2e 63 6f 6d 22 5d  |cerberauth.com"]|
          000000a0  2c 22 74 72 75 73 74 65  64 5f 69 73 73 75 65 72  |,"trusted_issuer|
          000000b0  73 22 3a 5b 22 68 74 74  70 73 3a 2f 2f 6f 61 75  |s":["https://oau|
          000000c0  74 68 2e 63 65 72 62 65  72 61 75 74 68 2e 63 6f  |th.cerberauth.co|
          000000d0  6d 22 5d 7d                                       |m"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "createUser",
    Version: (string) "",
    Description: (string) (len=44) "This can only be done by the logged in user.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=65) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/user"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=24) "createUsersWithListInput",
    Version: (string) "",
    Description: (string) (len=44) "Creates list of users with given input array",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=80) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/user/createWithList"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=11) "deleteOrder",
    Version: (string) "",
    Description: (string) (len=113) "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=6) "DELETE"
      },
      URL: (string) (len=78) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/store/order/<\\d+>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=9) "deletePet",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=6) "DELETE"
      },
      URL: (string) (len=70) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/pet/<\\d+>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=212) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 6f  61 75 74 68 2e 63 65 72  |ttps://oauth.cer|
          00000020  62 65 72 61 75 74 68 2e  63 6f 6d 2f 2e 77 65 6c  |berauth.com/.wel|
          00000030  6c 2d 6b 6e 6f 77 6e 2f  6a 77 6b 73 2e 6a 73 6f  |l-known/jwks.jso|
          00000040  6e 22 5d 2c 22 72 65 71  75 69 72 65 64 5f 73 63  |n"],"required_sc|
          00000050  6f 70 65 22 3a 5b 22 77  72 69 74 65 3a 70 65 74  |ope":["write:pet|
          00000060  73 22 2c 22 72 65 61 64  3a 70 65 74 73 22 5d 2c  |s","read:pets"],|
          00000070  22 74 61 72 67 65 74 5f  61 75 64 69 65 6e 63 65  |"target_audience|
          00000080  22 3a 5b 22 68 74 74 70  73 3a 2f 2f 61 70 69 2e  |":["https://api.|
          00000090  63 65 72 62 65 72 61 75  74 68 2e 63 6f 6d 22 5d  |cerberauth.com"]|
          000000a0  2c 22 74 72 75 73 74 65  64 5f 69 73 73 75 65 72  |,"trusted_issuer|
          000000b0  73 22 3a 5b 22 68 74 74  70 73 3a 2f 2f 6f 61 75  |s":["https://oau|
          000000c0  74 68 2e 63 65 72 62 65  72 61 75 74 68 2e 63 6f  |th.cerberauth.co|
          000000d0  6d 22 5d 7d                                       |m"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "deleteUser",
    Version: (string) "",
    Description: (string) (len=44) "This can only be done by the logged in user.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=6) "DELETE"
      },
      URL: (string) (len=70) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/user/<.+>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=16) "findPetsByStatus",
    Version: (string) "",
    Description: (string) (len=67) "Multiple status values can be provided with comma separated strings",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=77) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/pet/findByStatus"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=212) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 6f  61 75 74 68 2e 63 65 72  |ttps://oauth.cer|
          00000020  62 65 72 61 75 74 68 2e  63 6f 6d 2f 2e 77 65 6c  |berauth.com/.wel|
          00000030  6c 2d 6b 6e 6f 77 6e 2f  6a 77 6b 73 2e 6a 73 6f  |l-known/jwks.jso|
          00000040  6e 22 5d 2c 22 72 65 71  75 69 72 65 64 5f 73 63  |n"],"required_sc|
          00000050  6f 70 65 22 3a 5b 22 77  72 69 74 65 3a 70 65 74  |ope":["write:pet|
          00000060  73 22 2c 22 72 65 61 64  3a 70 65 74 73 22 5d 2c  |s","read:pets"],|
          00000070  22 74 61 72 67 65 74 5f  61 75 64 69 65 6e 63 65  |"target_audience|
          00000080  22 3a 5b 22 68 74 74 70  73 3a 2f 2f 61 70 69 2e  |":["https://api.|
          00000090  63 65 72 62 65 72 61 75  74 68 2e 63 6f 6d 22 5d  |cerberauth.com"]|
          000000a0  2c 22 74 72 75 73 74 65  64 5f 69 73 73 75 65 72  |,"trusted_issuer|
          000000b0  73 22 3a 5b 22 68 74 74  70 73 3a 2f 2f 6f 61 75  |s":["https://oau|
          000000c0  74 68 2e 63 65 72 62 65  72 61 75 74 68 2e 63 6f  |th.cerberauth.co|
          000000d0  6d 22 5d 7d                                       |m"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=14) "findPetsByTags",
    Version: (string) "",
    Description: (string) (len=93) "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=75) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/pet/findByTags"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=212) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 6f  61 75 74 68 2e 63 65 72  |ttps://oauth.cer|
          00000020  62 65 72 61 75 74 68 2e  63 6f 6d 2f 2e 77 65 6c  |berauth.com/.wel|
          00000030  6c 2d 6b 6e 6f 77 6e 2f  6a 77 6b 73 2e 6a 73 6f  |l-known/jwks.jso|
          00000040  6e 22 5d 2c 22 72 65 71  75 69 72 65 64 5f 73 63  |n"],"required_sc|
          00000050  6f 70 65 22 3a 5b 22 77  72 69 74 65 3a 70 65 74  |ope":["write:pet|
          00000060  73 22 2c 22 72 65 61 64  3a 70 65 74 73 22 5d 2c  |s","read:pets"],|
          00000070  22 74 61 72 67 65 74 5f  61 75 64 69 65 6e 63 65  |"target_audience|
          00000080  22 3a 5b 22 68 74 74 70  73 3a 2f 2f 61 70 69 2e  |":["https://api.|
          00000090  63 65 72 62 65 72 61 75  74 68 2e 63 6f 6d 22 5d  |cerberauth.com"]|
          000000a0  2c 22 74 72 75 73 74 65  64 5f 69 73 73 75 65 72  |,"trusted_issuer|
          000000b0  73 22 3a 5b 22 68 74 74  70 73 3a 2f 2f 6f 61 75  |s":["https://oau|
          000000c0  74 68 2e 63 65 72 62 65  72 61 75 74 68 2e 63 6f  |th.cerberauth.co|
          000000d0  6d 22 5d 7d                                       |m"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=12) "getInventory",
    Version: (string) "",
    Description: (string) (len=43) "Returns a map of status codes to quantities",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=76) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/store/inventory"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=12) "getOrderById",
    Version: (string) "",
    Description: (string) (len=98) "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=78) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/store/order/<\\d+>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "getPetById",
    Version: (string) "",
    Description: (string) (len=20) "Returns a single pet",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=70) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/pet/<\\d+>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=212) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 6f  61 75 74 68 2e 63 65 72  |ttps://oauth.cer|
          00000020  62 65 72 61 75 74 68 2e  63 6f 6d 2f 2e 77 65 6c  |berauth.com/.wel|
          00000030  6c 2d 6b 6e 6f 77 6e 2f  6a 77 6b 73 2e 6a 73 6f  |l-known/jwks.jso|
          00000040  6e 22 5d 2c 22 72 65 71  75 69 72 65 64 5f 73 63  |n"],"required_sc|
          00000050  6f 70 65 22 3a 5b 22 77  72 69 74 65 3a 70 65 74  |ope":["write:pet|
          00000060  73 22 2c 22 72 65 61 64  3a 70 65 74 73 22 5d 2c  |s","read:pets"],|
          00000070  22 74 61 72 67 65 74 5f  61 75 64 69 65 6e 63 65  |"target_audience|
          00000080  22 3a 5b 22 68 74 74 70  73 3a 2f 2f 61 70 69 2e  |":["https://api.|
          00000090  63 65 72 62 65 72 61 75  74 68 2e 63 6f 6d 22 5d  |cerberauth.com"]|
          000000a0  2c 22 74 72 75 73 74 65  64 5f 69 73 73 75 65 72  |,"trusted_issuer|
          000000b0  73 22 3a 5b 22 68 74 74  70 73 3a 2f 2f 6f 61 75  |s":["https://oau|
          000000c0  74 68 2e 63 65 72 62 65  72 61 75 74 68 2e 63 6f  |th.cerberauth.co|
          000000d0  6d 22 5d 7d                                       |m"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=13) "getUserByName",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=70) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/user/<.+>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=9) "loginUser",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=71) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/user/login"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "logoutUser",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=72) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/user/logout"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "placeOrder",
    Version: (string) "",
    Description: (string) (len=30) "Place a new order in the store",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=72) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/store/order"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=9) "updatePet",
    Version: (string) "",
    Description: (string) (len=28) "Update an existing pet by Id",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "PUT"
      },
      URL: (string) (len=64) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/pet"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=212) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 6f  61 75 74 68 2e 63 65 72  |ttps://oauth.cer|
          00000020  62 65 72 61 75 74 68 2e  63 6f 6d 2f 2e 77 65 6c  |berauth.com/.wel|
          00000030  6c 2d 6b 6e 6f 77 6e 2f  6a 77 6b 73 2e 6a 73 6f  |l-known/jwks.jso|
          00000040  6e 22 5d 2c 22 72 65 71  75 69 72 65 64 5f 73 63  |n"],"required_sc|
          00000050  6f 70 65 22 3a 5b 22 77  72 69 74 65 3a 70 65 74  |ope":["write:pet|
          00000060  73 22 2c 22 72 65 61 64  3a 70 65 74 73 22 5d 2c  |s","read:pets"],|
          00000070  22 74 61 72 67 65 74 5f  61 75 64 69 65 6e 63 65  |"target_audience|
          00000080  22 3a 5b 22 68 74 74 70  73 3a 2f 2f 61 70 69 2e  |":["https://api.|
          00000090  63 65 72 62 65 72 61 75  74 68 2e 63 6f 6d 22 5d  |cerberauth.com"]|
          000000a0  2c 22 74 72 75 73 74 65  64 5f 69 73 73 75 65 72  |,"trusted_issuer|
          000000b0  73 22 3a 5b 22 68 74 74  70 73 3a 2f 2f 6f 61 75  |s":["https://oau|
          000000c0  74 68 2e 63 65 72 62 65  72 61 75 74 68 2e 63 6f  |th.cerberauth.co|
          000000d0  6d 22 5d 7d                                       |m"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=17) "updatePetWithForm",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=70) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/pet/<\\d+>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=212) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 6f  61 75 74 68 2e 63 65 72  |ttps://oauth.cer|
          00000020  62 65 72 61 75 74 68 2e  63 6f 6d 2f 2e 77 65 6c  |berauth.com/.wel|
          00000030  6c 2d 6b 6e 6f 77 6e 2f  6a 77 6b 73 2e 6a 73 6f  |l-known/jwks.jso|
          00000040  6e 22 5d 2c 22 72 65 71  75 69 72 65 64 5f 73 63  |n"],"required_sc|
          00000050  6f 70 65 22 3a 5b 22 77  72 69 74 65 3a 70 65 74  |ope":["write:pet|
          00000060  73 22 2c 22 72 65 61 64  3a 70 65 74 73 22 5d 2c  |s","read:pets"],|
          00000070  22 74 61 72 67 65 74 5f  61 75 64 69 65 6e 63 65  |"target_audience|
          00000080  22 3a 5b 22 68 74 74 70  73 3a 2f 2f 61 70 69 2e  |":["https://api.|
          00000090  63 65 72 62 65 72 61 75  74 68 2e 63 6f 6d 22 5d  |cerberauth.com"]|
          000000a0  2c 22 74 72 75 73 74 65  64 5f 69 73 73 75 65 72  |,"trusted_issuer|
          000000b0  73 22 3a 5b 22 68 74 74  70 73 3a 2f 2f 6f 61 75  |s":["https://oau|
          000000c0  74 68 2e 63 65 72 62 65  72 61 75 74 68 2e 63 6f  |th.cerberauth.co|
          000000d0  6d 22 5d 7d                                       |m"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "updateUser",
    Version: (string) "",
    Description: (string) (len=44) "This can only be done by the logged in user.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "PUT"
      },
      URL: (string) (len=70) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/user/<.+>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "uploadFile",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=82) "<(https://cerberauth\\.com/api/v3|http://swagger\\.io/api/v3)>/pet/<\\d+>/uploadImage"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=212) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 6f  61 75 74 68 2e 63 65 72  |ttps://oauth.cer|
          00000020  62 65 72 61 75 74 68 2e  63 6f 6d 2f 2e 77 65 6c  |berauth.com/.wel|
          00000030  6c 2d 6b 6e 6f 77 6e 2f  6a 77 6b 73 2e 6a 73 6f  |l-known/jwks.jso|
          00000040  6e 22 5d 2c 22 72 65 71  75 69 72 65 64 5f 73 63  |n"],"required_sc|
          00000050  6f 70 65 22 3a 5b 22 77  72 69 74 65 3a 70 65 74  |ope":["write:pet|
          00000060  73 22 2c 22 72 65 61 64  3a 70 65 74 73 22 5d 2c  |s","read:pets"],|
          00000070  22 74 61 72 67 65 74 5f  61 75 64 69 65 6e 63 65  |"target_audience|
          00000080  22 3a 5b 22 68 74 74 70  73 3a 2f 2f 61 70 69 2e  |":["https://api.|
          00000090  63 65 72 62 65 72 61 75  74 68 2e 63 6f 6d 22 5d  |cerberauth.com"]|
          000000a0  2c 22 74 72 75 73 74 65  64 5f 69 73 73 75 65 72  |,"trusted_issuer|
          000000b0  73 22 3a 5b 22 68 74 74  70 73 3a 2f 2f 6f 61 75  |s":["https://oau|
          000000c0  74 68 2e 63 65 72 62 65  72 61 75 74 68 2e 63 6f  |th.cerberauth.co|
          000000d0  6d 22 5d 7d                                       |m"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) <nil>,
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  }
}
